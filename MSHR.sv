// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MSHR(
  input         clock,
                reset,
                io_allocate_valid,
                io_allocate_bits_prio_0,
                io_allocate_bits_prio_1,
                io_allocate_bits_prio_2,
                io_allocate_bits_control,
  input  [2:0]  io_allocate_bits_opcode,
                io_allocate_bits_param,
                io_allocate_bits_size,
  input  [5:0]  io_allocate_bits_source,
  input  [12:0] io_allocate_bits_tag,
  input  [5:0]  io_allocate_bits_offset,
                io_allocate_bits_put,
  input  [9:0]  io_allocate_bits_set,
  input         io_allocate_bits_repeat,
                io_directory_valid,
                io_directory_bits_dirty,
  input  [1:0]  io_directory_bits_state,
  input         io_directory_bits_clients,
  input  [12:0] io_directory_bits_tag,
  input         io_directory_bits_hit,
  input  [2:0]  io_directory_bits_way,
  input         io_schedule_ready,
                io_sinkc_valid,
                io_sinkc_bits_last,
  input  [12:0] io_sinkc_bits_tag,
  input  [5:0]  io_sinkc_bits_source,
  input  [2:0]  io_sinkc_bits_param,
  input         io_sinkc_bits_data,
                io_sinkd_valid,
                io_sinkd_bits_last,
  input  [2:0]  io_sinkd_bits_opcode,
                io_sinkd_bits_param,
                io_sinkd_bits_sink,
  input         io_sinkd_bits_denied,
                io_sinke_valid,
  input  [9:0]  io_nestedwb_set,
  input  [12:0] io_nestedwb_tag,
  input         io_nestedwb_b_toN,
                io_nestedwb_b_toB,
                io_nestedwb_b_clr_dirty,
                io_nestedwb_c_set_dirty,
  output        io_status_valid,
  output [9:0]  io_status_bits_set,
  output [12:0] io_status_bits_tag,
  output [2:0]  io_status_bits_way,
  output        io_status_bits_blockC,
                io_status_bits_nestC,
                io_schedule_valid,
                io_schedule_bits_a_valid,
  output [12:0] io_schedule_bits_a_bits_tag,
  output [9:0]  io_schedule_bits_a_bits_set,
  output [2:0]  io_schedule_bits_a_bits_param,
  output        io_schedule_bits_a_bits_block,
                io_schedule_bits_b_valid,
  output [2:0]  io_schedule_bits_b_bits_param,
  output [12:0] io_schedule_bits_b_bits_tag,
  output [9:0]  io_schedule_bits_b_bits_set,
  output        io_schedule_bits_b_bits_clients,
                io_schedule_bits_c_valid,
  output [2:0]  io_schedule_bits_c_bits_opcode,
                io_schedule_bits_c_bits_param,
  output [12:0] io_schedule_bits_c_bits_tag,
  output [9:0]  io_schedule_bits_c_bits_set,
  output [2:0]  io_schedule_bits_c_bits_way,
  output        io_schedule_bits_c_bits_dirty,
                io_schedule_bits_d_valid,
                io_schedule_bits_d_bits_prio_0,
                io_schedule_bits_d_bits_prio_2,
  output [2:0]  io_schedule_bits_d_bits_opcode,
                io_schedule_bits_d_bits_param,
                io_schedule_bits_d_bits_size,
  output [5:0]  io_schedule_bits_d_bits_source,
                io_schedule_bits_d_bits_offset,
                io_schedule_bits_d_bits_put,
  output [9:0]  io_schedule_bits_d_bits_set,
  output [2:0]  io_schedule_bits_d_bits_way,
  output        io_schedule_bits_d_bits_bad,
                io_schedule_bits_e_valid,
  output [2:0]  io_schedule_bits_e_bits_sink,
  output        io_schedule_bits_x_valid,
                io_schedule_bits_dir_valid,
  output [9:0]  io_schedule_bits_dir_bits_set,
  output [2:0]  io_schedule_bits_dir_bits_way,
  output        io_schedule_bits_dir_bits_data_dirty,
  output [1:0]  io_schedule_bits_dir_bits_data_state,
  output        io_schedule_bits_dir_bits_data_clients,
  output [12:0] io_schedule_bits_dir_bits_data_tag,
  output        io_schedule_bits_reload
);

  reg         request_valid;	// @[MSHR.scala:95:30]
  reg         request_prio_0;	// @[MSHR.scala:96:20]
  reg         request_prio_1;	// @[MSHR.scala:96:20]
  reg         request_prio_2;	// @[MSHR.scala:96:20]
  reg         request_control;	// @[MSHR.scala:96:20]
  reg  [2:0]  request_opcode;	// @[MSHR.scala:96:20]
  reg  [2:0]  request_param;	// @[MSHR.scala:96:20]
  reg  [2:0]  request_size;	// @[MSHR.scala:96:20]
  reg  [5:0]  request_source;	// @[MSHR.scala:96:20]
  reg  [12:0] request_tag;	// @[MSHR.scala:96:20]
  reg  [5:0]  request_offset;	// @[MSHR.scala:96:20]
  reg  [5:0]  request_put;	// @[MSHR.scala:96:20]
  reg  [9:0]  request_set;	// @[MSHR.scala:96:20]
  reg         meta_valid;	// @[MSHR.scala:97:27]
  reg         meta_dirty;	// @[MSHR.scala:98:17]
  reg  [1:0]  meta_state;	// @[MSHR.scala:98:17]
  reg         meta_clients;	// @[MSHR.scala:98:17]
  reg  [12:0] meta_tag;	// @[MSHR.scala:98:17]
  reg         meta_hit;	// @[MSHR.scala:98:17]
  reg  [2:0]  meta_way;	// @[MSHR.scala:98:17]
  reg         s_rprobe;	// @[MSHR.scala:119:33]
  reg         w_rprobeackfirst;	// @[MSHR.scala:120:33]
  reg         w_rprobeacklast;	// @[MSHR.scala:121:33]
  reg         s_release;	// @[MSHR.scala:122:33]
  reg         w_releaseack;	// @[MSHR.scala:123:33]
  reg         s_pprobe;	// @[MSHR.scala:124:33]
  reg         s_acquire;	// @[MSHR.scala:125:33]
  reg         s_flush;	// @[MSHR.scala:126:33]
  reg         w_grantfirst;	// @[MSHR.scala:127:33]
  reg         w_grantlast;	// @[MSHR.scala:128:33]
  reg         w_grant;	// @[MSHR.scala:129:33]
  reg         w_pprobeackfirst;	// @[MSHR.scala:130:33]
  reg         w_pprobeacklast;	// @[MSHR.scala:131:33]
  reg         w_pprobeack;	// @[MSHR.scala:132:33]
  reg         s_grantack;	// @[MSHR.scala:134:33]
  reg         s_execute;	// @[MSHR.scala:135:33]
  reg         w_grantack;	// @[MSHR.scala:136:33]
  reg         s_writeback;	// @[MSHR.scala:137:33]
  reg  [2:0]  sink;	// @[MSHR.scala:145:17]
  reg         gotT;	// @[MSHR.scala:146:17]
  reg         bad_grant;	// @[MSHR.scala:147:22]
  reg         probes_done;	// @[MSHR.scala:148:24]
  reg         probes_toN;	// @[MSHR.scala:149:23]
  wire        _io_status_bits_nestC_output = meta_valid & (~w_rprobeackfirst | ~w_pprobeackfirst | ~w_grantfirst);	// @[MSHR.scala:97:27, :120:33, :127:33, :130:33, :166:103, :171:{39,43,64,82}]
  wire        no_wait = w_rprobeacklast & w_releaseack & w_grantlast & w_pprobeacklast & w_grantack;	// @[MSHR.scala:121:33, :123:33, :128:33, :131:33, :136:33, :181:83]
  wire        _io_schedule_bits_a_valid_output = ~s_acquire & s_release & s_pprobe;	// @[MSHR.scala:122:33, :124:33, :125:33, :182:{31,55}]
  wire        _io_schedule_bits_b_valid_output = ~s_rprobe | ~s_pprobe;	// @[MSHR.scala:119:33, :124:33, :183:{31,41,44}]
  wire        _io_schedule_bits_c_valid_output = ~s_release & w_rprobeackfirst;	// @[MSHR.scala:120:33, :122:33, :184:{32,43}]
  wire        _io_schedule_bits_d_valid_output = ~s_execute & w_pprobeack & w_grant;	// @[MSHR.scala:129:33, :132:33, :135:33, :185:{31,57}]
  wire        _io_schedule_bits_e_valid_output = ~s_grantack & w_grantfirst;	// @[MSHR.scala:127:33, :134:33, :186:{31,43}]
  wire        _io_schedule_bits_x_valid_output = ~s_flush & w_releaseack;	// @[MSHR.scala:123:33, :126:33, :187:{31,40}]
  wire        _io_schedule_bits_dir_valid_output = ~s_release & w_rprobeackfirst | ~s_writeback & no_wait;	// @[MSHR.scala:120:33, :122:33, :137:33, :181:83, :184:32, :188:{45,66,70,83}]
  wire        _io_schedule_valid_output = _io_schedule_bits_a_valid_output | _io_schedule_bits_b_valid_output | _io_schedule_bits_c_valid_output | _io_schedule_bits_d_valid_output | _io_schedule_bits_e_valid_output | _io_schedule_bits_x_valid_output | _io_schedule_bits_dir_valid_output;	// @[MSHR.scala:182:55, :183:41, :184:43, :185:57, :186:43, :187:40, :188:66, :191:105]
  wire        req_clientBit = request_source == 6'h20;	// @[MSHR.scala:96:20, Parameters.scala:46:9]
  wire        _excluded_client_T_1 = request_opcode == 3'h6;	// @[MSHR.scala:96:20, Parameters.scala:268:14]
  wire        req_needT = ~(request_opcode[2]) | request_opcode == 3'h5 & request_param == 3'h1 | (_excluded_client_T_1 | (&request_opcode)) & (|request_param);	// @[MSHR.scala:96:20, Parameters.scala:266:{5,12}, :267:{13,33,42,70}, :268:{14,42,52,80,89}, :279:11]
  wire        req_acquire = _excluded_client_T_1 | (&request_opcode);	// @[MSHR.scala:96:20, :217:53, Parameters.scala:268:{14,52}]
  wire        _final_meta_writeback_state_T_2 = request_param != 3'h3 & meta_state == 2'h2;	// @[MSHR.scala:96:20, :98:17, :109:22, :223:{55,64,78}]
  wire        _final_meta_writeback_clients_T_7 = meta_clients & ~((request_param == 3'h1 | request_param == 3'h2 | request_param == 3'h5) & req_clientBit);	// @[MSHR.scala:96:20, :98:17, :224:{50,52,56}, Parameters.scala:46:9, :267:13, :279:{11,43,66,75}]
  wire        _GEN = (~meta_hit | ~probes_toN) & meta_clients;	// @[MSHR.scala:98:17, :149:23, :227:21, :228:36, :230:{36,54}, compatibility.scala:76:26]
  wire [1:0]  _final_meta_writeback_state_T_6 = {1'h1, ~req_acquire};	// @[MSHR.scala:103:14, :217:53, :236:40]
  wire [1:0]  _final_meta_writeback_state_T_9 = {1'h1, ~(~meta_clients & req_acquire)};	// @[MSHR.scala:98:17, :103:14, :217:53, :218:25, :242:{55,72}]
  wire [1:0]  _final_meta_writeback_state_T_13 = {meta_state == 2'h2, 1'h1};	// @[MSHR.scala:98:17, :103:14, :109:22, Mux.scala:81:{58,61}]
  wire        _final_meta_writeback_clients_T_14 = meta_hit & meta_clients & ~probes_toN | req_acquire & req_clientBit;	// @[MSHR.scala:98:17, :149:23, :217:53, :243:{40,66,88}, :244:40, Parameters.scala:46:9]
  wire        _GEN_0 = request_prio_2 | request_control;	// @[MSHR.scala:96:20, :221:54, :226:57, :245:30, compatibility.scala:76:26]
  wire        _GEN_1 = request_prio_2 | ~request_control;	// @[MSHR.scala:96:20, :221:54, :225:34, :226:57, :232:30, :246:30]
  wire        _io_schedule_bits_dir_bits_data_WIRE_dirty = ~bad_grant & (request_prio_2 ? meta_dirty | request_opcode[0] : request_control ? ~meta_hit & meta_dirty : meta_hit & meta_dirty | ~(request_opcode[2]));	// @[MSHR.scala:96:20, :98:17, :147:22, :221:54, :222:{34,48,65}, :226:57, :227:21, :228:36, :234:{32,45,60,63}, :249:20, :250:21, Parameters.scala:266:12, compatibility.scala:76:26]
  wire [1:0]  _GEN_2 = {1'h0, meta_hit};	// @[MSHR.scala:95:30, :98:17, :250:21, :255:36, :261:36]
  wire [1:0]  _io_schedule_bits_dir_bits_data_WIRE_state = bad_grant ? _GEN_2 : request_prio_2 ? (_final_meta_writeback_state_T_2 ? 2'h3 : meta_state) : request_control ? (meta_hit ? 2'h0 : meta_state) : req_needT ? _final_meta_writeback_state_T_6 : meta_hit ? ((&meta_state) ? _final_meta_writeback_state_T_9 : _final_meta_writeback_state_T_13) : gotT ? _final_meta_writeback_state_T_6 : 2'h1;	// @[MSHR.scala:96:20, :98:17, :102:22, :106:22, :113:22, :146:17, :147:22, :219:81, :221:54, :223:{34,40,64}, :226:57, :227:21, :229:36, :235:{32,38}, :236:40, :237:{40,55}, :242:55, :249:20, :250:21, :255:36, :261:36, Mux.scala:81:58, Parameters.scala:267:70, compatibility.scala:76:26]
  wire        _GEN_3 = meta_hit & meta_clients & ~probes_toN;	// @[MSHR.scala:98:17, :149:23, :250:21, :256:{36,54}, :262:36]
  wire        _io_schedule_bits_dir_bits_data_WIRE_clients = bad_grant ? _GEN_3 : request_prio_2 ? _final_meta_writeback_clients_T_7 : request_control ? _GEN : _final_meta_writeback_clients_T_14;	// @[MSHR.scala:96:20, :147:22, :221:54, :224:{34,50}, :226:57, :227:21, :230:36, :243:{34,88}, :249:20, :250:21, :256:36, :262:36, compatibility.scala:76:26]
  wire        excluded_client = meta_hit & request_prio_0 & (_excluded_client_T_1 | (&request_opcode) | request_opcode == 3'h4) & req_clientBit;	// @[MSHR.scala:96:20, :98:17, :277:28, Parameters.scala:46:9, :268:{14,52}, :276:{77,87}]
  wire        _T_509 = io_allocate_valid & io_allocate_bits_repeat;	// @[MSHR.scala:503:40]
  wire        new_meta_hit = _T_509 ? (bad_grant ? meta_hit : _GEN_1) : io_directory_bits_hit;	// @[MSHR.scala:98:17, :147:22, :221:54, :225:34, :226:57, :249:20, :250:21, :503:{21,40}]
  wire        new_request_prio_2 = io_allocate_valid ? io_allocate_bits_prio_2 : request_prio_2;	// @[MSHR.scala:96:20, :504:24]
  wire        _T_510 = io_directory_valid | _T_509;	// @[MSHR.scala:503:40, :537:28]
  wire        new_meta_dirty = _T_509 ? _io_schedule_bits_dir_bits_data_WIRE_dirty : io_directory_bits_dirty;	// @[MSHR.scala:221:54, :249:20, :250:21, :503:{21,40}]
  wire [1:0]  new_meta_state = _T_509 ? _io_schedule_bits_dir_bits_data_WIRE_state : io_directory_bits_state;	// @[MSHR.scala:221:54, :249:20, :250:21, :503:{21,40}]
  wire        new_meta_clients = _T_509 ? _io_schedule_bits_dir_bits_data_WIRE_clients : io_directory_bits_clients;	// @[MSHR.scala:221:54, :249:20, :250:21, :503:{21,40}]
  wire        new_request_control = io_allocate_valid ? io_allocate_bits_control : request_control;	// @[MSHR.scala:96:20, :504:24]
  wire [2:0]  new_request_opcode = io_allocate_valid ? io_allocate_bits_opcode : request_opcode;	// @[MSHR.scala:96:20, :504:24]
  wire [2:0]  new_request_param = io_allocate_valid ? io_allocate_bits_param : request_param;	// @[MSHR.scala:96:20, :504:24]
  wire        _T_551 = new_request_opcode == 3'h6;	// @[MSHR.scala:504:24, Parameters.scala:268:14]
  wire        new_needT = ~(new_request_opcode[2]) | new_request_opcode == 3'h5 & new_request_param == 3'h1 | (_T_551 | (&new_request_opcode)) & (|new_request_param);	// @[MSHR.scala:504:24, Parameters.scala:266:{5,12}, :267:{13,33,42,70}, :268:{14,42,52,80,89}, :279:11]
  wire        new_clientBit = (io_allocate_valid ? io_allocate_bits_source : request_source) == 6'h20;	// @[MSHR.scala:96:20, :504:24, Parameters.scala:46:9]
  wire        _T_536 = ~new_meta_hit & (|new_meta_state);	// @[MSHR.scala:503:21, :604:{13,27,45}]
  wire        _GEN_4 = new_request_prio_2 | (new_request_control ? ~new_meta_hit : ~_T_536);	// @[MSHR.scala:503:21, :504:24, :551:22, :569:60, :583:14, :586:61, :589:27, :604:{27,58}, :605:19]
  wire        _GEN_5 = new_request_prio_2 | (new_request_control ? ~(new_meta_hit & new_meta_clients) : ~(_T_536 & new_meta_clients));	// @[MSHR.scala:503:21, :504:24, :548:22, :569:60, :586:61, :589:27, :593:75, :594:20, :604:{27,58}, :608:74, :609:20]
  wire        _T_542 = ~new_meta_hit | new_meta_state == 2'h1 & new_needT;	// @[MSHR.scala:106:22, :503:21, :604:13, :615:{27,46,57}, Parameters.scala:267:70]
  wire        _GEN_6 = new_request_prio_2 | new_request_control;	// @[MSHR.scala:504:24, :554:22, :569:60, :586:61, :615:72]
  wire        _GEN_7 = _GEN_6 | ~_T_542;	// @[MSHR.scala:554:22, :569:60, :586:61, :615:{27,72}, :616:19]
  wire        _T_550 = new_meta_hit & (new_needT | new_meta_state == 2'h2) & new_meta_clients & ~((_T_551 | (&new_request_opcode) | new_request_opcode == 3'h4) & new_clientBit);	// @[MSHR.scala:109:22, :503:21, :504:24, :507:26, :625:{24,42,53}, :626:33, Parameters.scala:46:9, :267:70, :268:{14,52}, :276:{77,87}]
  wire        _GEN_8 = _GEN_6 | ~_T_550;	// @[MSHR.scala:553:22, :554:22, :569:60, :586:61, :615:72, :625:53, :626:63, :627:18]
  wire        _T_553 = _T_551 | (&new_request_opcode);	// @[MSHR.scala:504:24, :634:49, Parameters.scala:268:{14,52}]
  wire        _GEN_9 = io_schedule_ready & no_wait;	// @[MSHR.scala:137:33, :181:83, :195:28, :204:{35,50}]
  wire        _T_33 = meta_valid & (|meta_state) & io_nestedwb_set == request_set & io_nestedwb_tag == meta_tag;	// @[MSHR.scala:96:20, :97:27, :98:17, :153:34, :154:{25,41,60}]
  wire        probe_bit = io_sinkc_bits_source == 6'h20;	// @[Parameters.scala:46:9]
  wire        _T_484 = io_sinkd_bits_opcode == 3'h4 | io_sinkd_bits_opcode == 3'h5;	// @[MSHR.scala:481:{32,42,66}, Parameters.scala:267:13, :276:87]
  wire        _GEN_10 = io_sinkd_valid & _T_484;	// @[MSHR.scala:145:17, :480:25, :481:{42,81}, :482:12]
  wire        last_probe = (probes_done | probe_bit) == (meta_clients & ~excluded_client);	// @[MSHR.scala:98:17, :148:24, :277:28, :287:53, :457:{33,46,64}, Parameters.scala:46:9]
  wire        _GEN_11 = io_sinkc_valid & last_probe;	// @[MSHR.scala:120:33, :457:46, :459:49, :468:22]
  wire        _GEN_12 = io_sinkc_valid & last_probe & io_sinkc_bits_last;	// @[MSHR.scala:121:33, :457:46, :459:49, :469:21]
  always @(posedge clock) begin
    if (reset) begin
      request_valid <= 1'h0;	// @[MSHR.scala:95:30]
      meta_valid <= 1'h0;	// @[MSHR.scala:95:30, :97:27]
      s_rprobe <= 1'h1;	// @[MSHR.scala:103:14, :119:33]
      w_rprobeackfirst <= 1'h1;	// @[MSHR.scala:103:14, :120:33]
      w_rprobeacklast <= 1'h1;	// @[MSHR.scala:103:14, :121:33]
      s_release <= 1'h1;	// @[MSHR.scala:103:14, :122:33]
      w_releaseack <= 1'h1;	// @[MSHR.scala:103:14, :123:33]
      s_pprobe <= 1'h1;	// @[MSHR.scala:103:14, :124:33]
      s_acquire <= 1'h1;	// @[MSHR.scala:103:14, :125:33]
      s_flush <= 1'h1;	// @[MSHR.scala:103:14, :126:33]
      w_grantfirst <= 1'h1;	// @[MSHR.scala:103:14, :127:33]
      w_grantlast <= 1'h1;	// @[MSHR.scala:103:14, :128:33]
      w_grant <= 1'h1;	// @[MSHR.scala:103:14, :129:33]
      w_pprobeackfirst <= 1'h1;	// @[MSHR.scala:103:14, :130:33]
      w_pprobeacklast <= 1'h1;	// @[MSHR.scala:103:14, :131:33]
      w_pprobeack <= 1'h1;	// @[MSHR.scala:103:14, :132:33]
      s_grantack <= 1'h1;	// @[MSHR.scala:103:14, :134:33]
      s_execute <= 1'h1;	// @[MSHR.scala:103:14, :135:33]
      w_grantack <= 1'h1;	// @[MSHR.scala:103:14, :136:33]
      s_writeback <= 1'h1;	// @[MSHR.scala:103:14, :137:33]
    end
    else begin
      request_valid <= io_allocate_valid | ~_GEN_9 & request_valid;	// @[MSHR.scala:95:30, :137:33, :195:28, :204:{35,50}, :206:20, :207:21, :530:28, :532:19]
      meta_valid <= _T_510 | ~_GEN_9 & meta_valid;	// @[MSHR.scala:95:30, :97:27, :137:33, :195:28, :204:{35,50}, :206:20, :207:21, :208:18, :537:{28,79}, :538:16]
      if (_T_510) begin	// @[MSHR.scala:537:28]
        s_rprobe <= _GEN_5;	// @[MSHR.scala:119:33, :548:22, :569:60, :586:61]
        w_rprobeackfirst <= _GEN_5;	// @[MSHR.scala:120:33, :548:22, :569:60, :586:61]
        w_rprobeacklast <= _GEN_5;	// @[MSHR.scala:121:33, :548:22, :569:60, :586:61]
        s_release <= _GEN_4;	// @[MSHR.scala:122:33, :551:22, :569:60, :586:61]
        w_releaseack <= _GEN_4;	// @[MSHR.scala:123:33, :551:22, :569:60, :586:61]
        s_pprobe <= _GEN_8;	// @[MSHR.scala:124:33, :553:22, :569:60, :586:61, :626:63]
        s_acquire <= _GEN_7;	// @[MSHR.scala:125:33, :554:22, :569:60, :586:61, :615:72]
        s_flush <= new_request_prio_2 | ~new_request_control;	// @[MSHR.scala:126:33, :504:24, :555:22, :569:60, :586:61, :587:15]
        w_grantfirst <= _GEN_7;	// @[MSHR.scala:127:33, :554:22, :569:60, :586:61, :615:72]
        w_grantlast <= _GEN_7;	// @[MSHR.scala:128:33, :554:22, :569:60, :586:61, :615:72]
        w_grant <= _GEN_7;	// @[MSHR.scala:129:33, :554:22, :569:60, :586:61, :615:72]
        w_pprobeackfirst <= _GEN_8;	// @[MSHR.scala:130:33, :553:22, :569:60, :586:61, :626:63]
        w_pprobeacklast <= _GEN_8;	// @[MSHR.scala:131:33, :553:22, :569:60, :586:61, :626:63]
        w_pprobeack <= _GEN_8;	// @[MSHR.scala:132:33, :553:22, :569:60, :586:61, :626:63]
        s_grantack <= _GEN_7;	// @[MSHR.scala:134:33, :554:22, :569:60, :586:61, :615:72]
        s_execute <= ~new_request_prio_2 & new_request_control;	// @[MSHR.scala:135:33, :504:24, :569:60, :570:17, :586:61]
        w_grantack <= _GEN_6 | ~_T_553;	// @[MSHR.scala:136:33, :554:22, :565:22, :569:60, :586:61, :615:72, :634:{49,88}, :635:20]
        if (new_request_prio_2)	// @[MSHR.scala:504:24]
          s_writeback <= ~((new_request_param == 3'h1 | new_request_param == 3'h2 | new_request_param == 3'h5) & new_meta_clients & new_clientBit | (new_request_param == 3'h0 | new_request_param == 3'h4) & new_meta_state == 2'h2 | new_request_opcode[0] & ~new_meta_dirty);	// @[MSHR.scala:109:22, :137:33, :297:69, :503:21, :504:24, :566:22, :572:{31,35,38,55}, :573:21, :576:{38,56,67}, :577:21, :580:{38,89}, :581:21, Parameters.scala:46:9, :267:13, :276:87, :279:{11,43,66,75}, :282:{11,34,43}]
        else	// @[MSHR.scala:504:24]
          s_writeback <= new_request_control | ~(~(new_request_opcode[2]) & new_meta_hit & ~new_meta_dirty | _T_553 | _T_550 | _T_542);	// @[MSHR.scala:137:33, :503:21, :504:24, :566:22, :586:61, :615:{27,72}, :621:21, :625:53, :626:63, :631:21, :634:{49,88}, :636:21, :639:{13,52,55,72}, :640:21, Parameters.scala:266:12]
      end
      else begin	// @[MSHR.scala:537:28]
        s_rprobe <= io_schedule_ready | s_rprobe;	// @[MSHR.scala:119:33, :195:28, :196:50]
        w_rprobeackfirst <= _GEN_11 | w_rprobeackfirst;	// @[MSHR.scala:120:33, :459:49, :468:22]
        w_rprobeacklast <= _GEN_12 | w_rprobeacklast;	// @[MSHR.scala:121:33, :459:49, :469:21]
        s_release <= io_schedule_ready & w_rprobeackfirst | s_release;	// @[MSHR.scala:120:33, :122:33, :195:28, :197:{35,50}]
        w_releaseack <= io_sinkd_valid & ~_T_484 & io_sinkd_bits_opcode == 3'h6 | w_releaseack;	// @[MSHR.scala:123:33, :480:25, :481:{42,81}, :493:{37,53}, Parameters.scala:268:14]
        s_pprobe <= io_schedule_ready | s_pprobe;	// @[MSHR.scala:124:33, :195:28, :198:50]
        s_acquire <= io_schedule_ready & s_release & s_pprobe | s_acquire;	// @[MSHR.scala:122:33, :124:33, :125:33, :195:28, :199:{35,50}]
        s_flush <= io_schedule_ready & w_releaseack | s_flush;	// @[MSHR.scala:123:33, :126:33, :195:28, :200:{35,50}]
        w_grantfirst <= _GEN_10 | w_grantfirst;	// @[MSHR.scala:127:33, :145:17, :480:25, :481:81, :482:12, :483:20]
        if (_GEN_10) begin	// @[MSHR.scala:145:17, :480:25, :481:81, :482:12]
          w_grantlast <= io_sinkd_bits_last;	// @[MSHR.scala:128:33]
          w_grant <= ~(|request_offset) | io_sinkd_bits_last;	// @[MSHR.scala:96:20, :129:33, :473:77, :488:{33,45}]
        end
        w_pprobeackfirst <= _GEN_11 | w_pprobeackfirst;	// @[MSHR.scala:120:33, :130:33, :459:49, :468:22, :470:22]
        w_pprobeacklast <= _GEN_12 | w_pprobeacklast;	// @[MSHR.scala:121:33, :131:33, :459:49, :469:21, :471:21]
        w_pprobeack <= io_sinkc_valid & last_probe & (io_sinkc_bits_last | ~(|request_offset)) | w_pprobeack;	// @[MSHR.scala:96:20, :132:33, :457:46, :459:49, :473:{59,77}, :474:17]
        s_grantack <= io_schedule_ready & w_grantfirst | s_grantack;	// @[MSHR.scala:127:33, :134:33, :195:28, :202:{35,50}]
        s_execute <= io_schedule_ready & w_pprobeack & w_grant | s_execute;	// @[MSHR.scala:129:33, :132:33, :135:33, :195:28, :203:{35,50}]
        w_grantack <= io_sinke_valid | w_grantack;	// @[MSHR.scala:136:33, :497:25, :498:16]
        s_writeback <= _GEN_9 | s_writeback;	// @[MSHR.scala:137:33, :195:28, :204:{35,50}]
      end
    end
    if (io_allocate_valid) begin
      request_prio_0 <= io_allocate_bits_prio_0;	// @[MSHR.scala:96:20]
      request_prio_1 <= io_allocate_bits_prio_1;	// @[MSHR.scala:96:20]
      request_prio_2 <= io_allocate_bits_prio_2;	// @[MSHR.scala:96:20]
      request_control <= io_allocate_bits_control;	// @[MSHR.scala:96:20]
      request_opcode <= io_allocate_bits_opcode;	// @[MSHR.scala:96:20]
      request_param <= io_allocate_bits_param;	// @[MSHR.scala:96:20]
      request_size <= io_allocate_bits_size;	// @[MSHR.scala:96:20]
      request_source <= io_allocate_bits_source;	// @[MSHR.scala:96:20]
      request_tag <= io_allocate_bits_tag;	// @[MSHR.scala:96:20]
      request_offset <= io_allocate_bits_offset;	// @[MSHR.scala:96:20]
      request_put <= io_allocate_bits_put;	// @[MSHR.scala:96:20]
      request_set <= io_allocate_bits_set;	// @[MSHR.scala:96:20]
    end
    if (_T_510) begin	// @[MSHR.scala:537:28]
      if (_T_509) begin	// @[MSHR.scala:503:40]
        meta_dirty <= _io_schedule_bits_dir_bits_data_WIRE_dirty;	// @[MSHR.scala:98:17, :221:54, :249:20, :250:21]
        if (bad_grant) begin	// @[MSHR.scala:147:22]
          meta_state <= _GEN_2;	// @[MSHR.scala:98:17, :250:21, :255:36, :261:36]
          meta_clients <= _GEN_3;	// @[MSHR.scala:98:17, :250:21, :256:36, :262:36]
        end
        else begin	// @[MSHR.scala:147:22]
          if (request_prio_2) begin	// @[MSHR.scala:96:20]
            if (_final_meta_writeback_state_T_2)	// @[MSHR.scala:223:64]
              meta_state <= 2'h3;	// @[MSHR.scala:98:17, :113:22]
            meta_clients <= _final_meta_writeback_clients_T_7;	// @[MSHR.scala:98:17, :224:50]
          end
          else if (request_control) begin	// @[MSHR.scala:96:20]
            if (meta_hit)	// @[MSHR.scala:98:17]
              meta_state <= 2'h0;	// @[MSHR.scala:98:17, :102:22]
            meta_clients <= _GEN;	// @[MSHR.scala:98:17, :227:21, :230:36, compatibility.scala:76:26]
          end
          else begin	// @[MSHR.scala:96:20]
            if (req_needT)	// @[Parameters.scala:267:70]
              meta_state <= _final_meta_writeback_state_T_6;	// @[MSHR.scala:98:17, :236:40]
            else if (meta_hit) begin	// @[MSHR.scala:98:17]
              if (&meta_state)	// @[MSHR.scala:98:17, :219:81]
                meta_state <= _final_meta_writeback_state_T_9;	// @[MSHR.scala:98:17, :242:55]
              else	// @[MSHR.scala:219:81]
                meta_state <= _final_meta_writeback_state_T_13;	// @[MSHR.scala:98:17, Mux.scala:81:58]
            end
            else if (gotT)	// @[MSHR.scala:146:17]
              meta_state <= _final_meta_writeback_state_T_6;	// @[MSHR.scala:98:17, :236:40]
            else	// @[MSHR.scala:146:17]
              meta_state <= 2'h1;	// @[MSHR.scala:98:17, :106:22]
            meta_clients <= _final_meta_writeback_clients_T_14;	// @[MSHR.scala:98:17, :243:88]
          end
          meta_hit <= _GEN_1;	// @[MSHR.scala:98:17, :221:54, :225:34, :226:57]
        end
        if (~_GEN_0)	// @[MSHR.scala:221:54, :226:57, :245:30, compatibility.scala:76:26]
          meta_tag <= request_tag;	// @[MSHR.scala:96:20, :98:17]
      end
      else begin	// @[MSHR.scala:503:40]
        meta_dirty <= io_directory_bits_dirty;	// @[MSHR.scala:98:17]
        meta_state <= io_directory_bits_state;	// @[MSHR.scala:98:17]
        meta_clients <= io_directory_bits_clients;	// @[MSHR.scala:98:17]
        meta_tag <= io_directory_bits_tag;	// @[MSHR.scala:98:17]
        meta_hit <= io_directory_bits_hit;	// @[MSHR.scala:98:17]
      end
    end
    else begin	// @[MSHR.scala:537:28]
      meta_dirty <= io_sinkc_valid & (|meta_state) & io_sinkc_bits_tag == meta_tag & io_sinkc_bits_data | (_T_33 ? io_nestedwb_c_set_dirty | ~io_nestedwb_b_clr_dirty & meta_dirty : meta_dirty);	// @[MSHR.scala:98:17, :153:34, :154:{41,74}, :155:{36,49}, :156:{36,49}, :459:49, :478:{55,91,104}]
      if (_T_33 & io_nestedwb_b_toB)	// @[MSHR.scala:98:17, :154:{41,74}, :157:{30,43}]
        meta_state <= 2'h1;	// @[MSHR.scala:98:17, :106:22]
      meta_hit <= ~(_T_33 & io_nestedwb_b_toN) & meta_hit;	// @[MSHR.scala:98:17, :154:{41,74}, :158:{30,41}]
    end
    if (~_T_510 | _T_509) begin	// @[MSHR.scala:98:17, :503:40, :537:{28,79}, :539:10]
    end
    else	// @[MSHR.scala:98:17, :537:79, :539:10]
      meta_way <= io_directory_bits_way;	// @[MSHR.scala:98:17]
    if (_GEN_10)	// @[MSHR.scala:145:17, :480:25, :481:81, :482:12]
      sink <= io_sinkd_bits_sink;	// @[MSHR.scala:145:17]
    gotT <= ~_T_510 & (_GEN_10 ? io_sinkd_bits_param == 3'h0 : gotT);	// @[MSHR.scala:98:17, :145:17, :146:17, :297:69, :480:25, :481:81, :482:12, :491:{12,35}, :537:{28,79}, :539:10, :543:10]
    bad_grant <= ~_T_510 & (_GEN_10 ? io_sinkd_bits_denied : bad_grant);	// @[MSHR.scala:98:17, :145:17, :147:22, :480:25, :481:81, :482:12, :486:17, :537:{28,79}, :539:10, :544:15]
    probes_done <= ~_T_510 & (io_sinkc_valid & probe_bit | probes_done);	// @[MSHR.scala:98:17, :148:24, :459:49, :465:17, :537:{28,79}, :539:10, :540:17, Parameters.scala:46:9]
    probes_toN <= ~_T_510 & (io_sinkc_valid & (io_sinkc_bits_param == 3'h1 | io_sinkc_bits_param == 3'h2 | io_sinkc_bits_param == 3'h5) & probe_bit | probes_toN);	// @[MSHR.scala:98:17, :149:23, :459:49, :466:16, :537:{28,79}, :539:10, :541:16, Parameters.scala:46:9, :267:13, :279:{11,43,66,75}]
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire             _GEN_13 = meta_valid & meta_state == 2'h0;	// @[MSHR.scala:97:27, :98:17, :102:{22,35}]
    wire             _GEN_14 = meta_valid & meta_state == 2'h2;	// @[MSHR.scala:97:27, :98:17, :109:{22,33}]
    wire  [3:0][3:0] _GEN_15 = {{{2'h1, ~meta_clients, ~meta_dirty}}, {{3'h1, ~meta_dirty}}, {{3'h0, ~meta_clients}}, {4'h8}};	// @[MSHR.scala:98:17, :106:22, :110:14, :219:81, :289:53, :297:69, :315:26, :316:26, :317:{26,32}, :318:26, :319:26, Parameters.scala:279:11]
    wire  [3:0]      before_0 = meta_hit ? _GEN_15[meta_state] : 4'h8;	// @[MSHR.scala:98:17, :219:81, :289:53, :315:26, :316:26, :317:26, :318:26, :319:26, :321:{17,23}]
    wire  [3:0][3:0] _GEN_16 = {{{2'h1, ~_io_schedule_bits_dir_bits_data_WIRE_clients, ~_io_schedule_bits_dir_bits_data_WIRE_dirty}}, {{3'h1, ~_io_schedule_bits_dir_bits_data_WIRE_dirty}}, {{3'h0, ~_io_schedule_bits_dir_bits_data_WIRE_clients}}, {4'h8}};	// @[MSHR.scala:106:22, :221:54, :249:20, :250:21, :297:69, :315:26, :316:{26,32}, :317:{26,32}, :318:26, :319:26, Parameters.scala:279:11]
    wire  [3:0]      after = _GEN_16[_io_schedule_bits_dir_bits_data_WIRE_state];	// @[MSHR.scala:221:54, :249:20, :250:21, :315:26, :316:26, :317:26, :318:26]
    wire             _T_77 = ~s_writeback & no_wait & io_schedule_ready;	// @[MSHR.scala:137:33, :181:83, :188:70, :372:35]
    wire             _T_107 = before_0 == 4'h8;	// @[MSHR.scala:315:26, :319:26, :321:{17,23}, :373:15]
    wire             _T_430 = after == 4'h1;	// @[MSHR.scala:315:26, :316:26, :373:15]
    wire             _T_437 = after == 4'h0;	// @[MSHR.scala:315:26, :316:26, :374:15]
    wire             _T_444 = after == 4'h7;	// @[MSHR.scala:315:26, :316:26, :375:15]
    wire             _T_451 = after == 4'h5;	// @[MSHR.scala:315:26, :316:26, :376:15]
    wire             _T_461 = after == 4'h4;	// @[MSHR.scala:315:26, :316:26, :377:15]
    wire             _T_464 = after == 4'h3;	// @[MSHR.scala:315:26, :316:26, :379:15]
    wire             _T_420 = after == 4'h2;	// @[MSHR.scala:315:26, :316:26, :380:15]
    wire             _T_147 = before_0 == 4'h1;	// @[MSHR.scala:315:26, :321:{17,23}, :373:15, :382:15]
    wire             _T_423 = after == 4'h8;	// @[MSHR.scala:315:26, :316:26, :319:26, :382:15]
    wire             _T_187 = before_0 == 4'h0;	// @[MSHR.scala:315:26, :321:{17,23}, :374:15, :391:15]
    wire             _T_235 = before_0 == 4'h7;	// @[MSHR.scala:315:26, :321:{17,23}, :375:15, :400:15]
    wire             _T_279 = before_0 == 4'h5;	// @[MSHR.scala:315:26, :321:{17,23}, :376:15, :409:15]
    wire             _T_335 = before_0 == 4'h6;	// @[MSHR.scala:315:26, :321:{17,23}, :418:15]
    wire             _T_383 = before_0 == 4'h4;	// @[MSHR.scala:315:26, :321:{17,23}, :377:15, :427:15]
    wire             _T_419 = before_0 == 4'h3;	// @[MSHR.scala:315:26, :321:{17,23}, :379:15, :436:15]
    wire             _T_463 = before_0 == 4'h2;	// @[MSHR.scala:315:26, :321:{17,23}, :380:15, :445:15]
    always @(posedge clock) begin	// @[MSHR.scala:103:14]
      if (_GEN_13 & ~reset & meta_clients) begin	// @[MSHR.scala:98:17, :102:35, :103:14]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:103:14]
          $error("Assertion failed\n    at MSHR.scala:103 assert (!meta.clients.orR)\n");	// @[MSHR.scala:103:14]
        if (`STOP_COND_)	// @[MSHR.scala:103:14]
          $fatal;	// @[MSHR.scala:103:14]
      end
      if (_GEN_13 & ~reset & meta_dirty) begin	// @[MSHR.scala:98:17, :102:35, :104:14]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:104:14]
          $error("Assertion failed\n    at MSHR.scala:104 assert (!meta.dirty)\n");	// @[MSHR.scala:104:14]
        if (`STOP_COND_)	// @[MSHR.scala:104:14]
          $fatal;	// @[MSHR.scala:104:14]
      end
      if (meta_valid & meta_state == 2'h1 & ~reset & meta_dirty) begin	// @[MSHR.scala:97:27, :98:17, :106:22, :107:14]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:107:14]
          $error("Assertion failed\n    at MSHR.scala:107 assert (!meta.dirty)\n");	// @[MSHR.scala:107:14]
        if (`STOP_COND_)	// @[MSHR.scala:107:14]
          $fatal;	// @[MSHR.scala:107:14]
      end
      if (_GEN_14 & ~reset & ~meta_clients) begin	// @[MSHR.scala:98:17, :109:33, :110:14]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:110:14]
          $error("Assertion failed\n    at MSHR.scala:110 assert (meta.clients.orR)\n");	// @[MSHR.scala:110:14]
        if (`STOP_COND_)	// @[MSHR.scala:110:14]
          $fatal;	// @[MSHR.scala:110:14]
      end
      if (_GEN_14 & ~reset & meta_clients & meta_clients - 1'h1) begin	// @[MSHR.scala:98:17, :109:33, :111:{14,45}]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:111:14]
          $error("Assertion failed\n    at MSHR.scala:111 assert ((meta.clients & (meta.clients - UInt(1))) === UInt(0)) // at most one\n");	// @[MSHR.scala:111:14]
        if (`STOP_COND_)	// @[MSHR.scala:111:14]
          $fatal;	// @[MSHR.scala:111:14]
      end
      if (~reset & ~(~(meta_valid & w_releaseack & w_rprobeacklast & w_pprobeacklast & ~w_grantfirst) | ~(~meta_valid | (~w_releaseack | ~w_rprobeacklast | ~w_pprobeacklast) & ~w_grantfirst))) begin	// @[MSHR.scala:97:27, :121:33, :123:33, :127:33, :131:33, :166:{28,40,45,62,79,82,100,103}, :167:93, :177:{10,11,33,36}]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:177:10]
          $error("Assertion failed\n    at MSHR.scala:177 assert (!io.status.bits.nestB || !io.status.bits.blockB)\n");	// @[MSHR.scala:177:10]
        if (`STOP_COND_)	// @[MSHR.scala:177:10]
          $fatal;	// @[MSHR.scala:177:10]
      end
      if (~reset & ~(~_io_status_bits_nestC_output | meta_valid)) begin	// @[MSHR.scala:97:27, :171:39, :178:{10,11,33}]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:178:10]
          $error("Assertion failed\n    at MSHR.scala:178 assert (!io.status.bits.nestC || !io.status.bits.blockC)\n");	// @[MSHR.scala:178:10]
        if (`STOP_COND_)	// @[MSHR.scala:178:10]
          $fatal;	// @[MSHR.scala:178:10]
      end
      if (bad_grant & meta_hit & ~reset & ~(~meta_valid | meta_state == 2'h1)) begin	// @[MSHR.scala:97:27, :98:17, :106:22, :147:22, :166:28, :252:{14,27,41}]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:252:14]
          $error("Assertion failed\n    at MSHR.scala:252 assert (!meta_valid || meta.state === BRANCH)\n");	// @[MSHR.scala:252:14]
        if (`STOP_COND_)	// @[MSHR.scala:252:14]
          $fatal;	// @[MSHR.scala:252:14]
      end
      if (_T_77 & ~reset & _T_107 & _T_451) begin	// @[MSHR.scala:372:35, :373:15, :376:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:376:15]
          $error("Assertion failed: State transition from S_INVALID to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:376:15]
        if (`STOP_COND_)	// @[MSHR.scala:376:15]
          $fatal;	// @[MSHR.scala:376:15]
      end
      if (_T_77 & ~reset & _T_107 & _T_461) begin	// @[MSHR.scala:372:35, :373:15, :377:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:377:15]
          $error("Assertion failed: State transition from S_INVALID to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:377:15]
        if (`STOP_COND_)	// @[MSHR.scala:377:15]
          $fatal;	// @[MSHR.scala:377:15]
      end
      if (_T_77 & ~reset & _T_107 & _T_420) begin	// @[MSHR.scala:372:35, :373:15, :380:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:380:15]
          $error("Assertion failed: State transition from S_INVALID to S_TRUNK_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:380:15]
        if (`STOP_COND_)	// @[MSHR.scala:380:15]
          $fatal;	// @[MSHR.scala:380:15]
      end
      if (_T_77 & ~reset & _T_147 & _T_423) begin	// @[MSHR.scala:372:35, :382:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:382:15]
          $error("Assertion failed: State transition from S_BRANCH to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:382:15]
        if (`STOP_COND_)	// @[MSHR.scala:382:15]
          $fatal;	// @[MSHR.scala:382:15]
      end
      if (_T_77 & ~reset & _T_147 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :382:15, :385:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:385:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:385:15]
        if (`STOP_COND_)	// @[MSHR.scala:385:15]
          $fatal;	// @[MSHR.scala:385:15]
      end
      if (_T_77 & ~reset & _T_147 & _T_461) begin	// @[MSHR.scala:372:35, :377:15, :382:15, :386:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:386:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:386:15]
        if (`STOP_COND_)	// @[MSHR.scala:386:15]
          $fatal;	// @[MSHR.scala:386:15]
      end
      if (_T_77 & ~reset & _T_147 & _T_420) begin	// @[MSHR.scala:372:35, :380:15, :382:15, :389:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:389:15]
          $error("Assertion failed: State transition from S_BRANCH to S_TRUNK_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:389:15]
        if (`STOP_COND_)	// @[MSHR.scala:389:15]
          $fatal;	// @[MSHR.scala:389:15]
      end
      if (_T_77 & ~reset & _T_187 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :391:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:391:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:391:15]
        if (`STOP_COND_)	// @[MSHR.scala:391:15]
          $fatal;	// @[MSHR.scala:391:15]
      end
      if (_T_77 & ~reset & _T_187 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :391:15, :394:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:394:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:394:15]
        if (`STOP_COND_)	// @[MSHR.scala:394:15]
          $fatal;	// @[MSHR.scala:394:15]
      end
      if (_T_77 & ~reset & _T_187 & _T_461) begin	// @[MSHR.scala:372:35, :377:15, :391:15, :396:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:396:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:396:15]
        if (`STOP_COND_)	// @[MSHR.scala:396:15]
          $fatal;	// @[MSHR.scala:396:15]
      end
      if (_T_77 & ~reset & _T_187 & _T_420) begin	// @[MSHR.scala:372:35, :380:15, :391:15, :398:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:398:15]
          $error("Assertion failed: State transition from S_BRANCH_C to S_TRUNK_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:398:15]
        if (`STOP_COND_)	// @[MSHR.scala:398:15]
          $fatal;	// @[MSHR.scala:398:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :400:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:400:15]
          $error("Assertion failed: State transition from S_TIP to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:400:15]
        if (`STOP_COND_)	// @[MSHR.scala:400:15]
          $fatal;	// @[MSHR.scala:400:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :400:15, :401:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:401:15]
          $error("Assertion failed: State transition from S_TIP to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:401:15]
        if (`STOP_COND_)	// @[MSHR.scala:401:15]
          $fatal;	// @[MSHR.scala:401:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :400:15, :402:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:402:15]
          $error("Assertion failed: State transition from S_TIP to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:402:15]
        if (`STOP_COND_)	// @[MSHR.scala:402:15]
          $fatal;	// @[MSHR.scala:402:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :400:15, :403:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:403:15]
          $error("Assertion failed: State transition from S_TIP to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:403:15]
        if (`STOP_COND_)	// @[MSHR.scala:403:15]
          $fatal;	// @[MSHR.scala:403:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_461) begin	// @[MSHR.scala:372:35, :377:15, :400:15, :405:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:405:15]
          $error("Assertion failed: State transition from S_TIP to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:405:15]
        if (`STOP_COND_)	// @[MSHR.scala:405:15]
          $fatal;	// @[MSHR.scala:405:15]
      end
      if (_T_77 & ~reset & _T_235 & _T_420) begin	// @[MSHR.scala:372:35, :380:15, :400:15, :407:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:407:15]
          $error("Assertion failed: State transition from S_TIP to S_TRUNK_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:407:15]
        if (`STOP_COND_)	// @[MSHR.scala:407:15]
          $fatal;	// @[MSHR.scala:407:15]
      end
      if (_T_77 & ~reset & _T_279 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :409:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:409:15]
          $error("Assertion failed: State transition from S_TIP_C to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:409:15]
        if (`STOP_COND_)	// @[MSHR.scala:409:15]
          $fatal;	// @[MSHR.scala:409:15]
      end
      if (_T_77 & ~reset & _T_279 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :409:15, :410:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:410:15]
          $error("Assertion failed: State transition from S_TIP_C to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:410:15]
        if (`STOP_COND_)	// @[MSHR.scala:410:15]
          $fatal;	// @[MSHR.scala:410:15]
      end
      if (_T_77 & ~reset & _T_279 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :409:15, :411:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:411:15]
          $error("Assertion failed: State transition from S_TIP_C to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:411:15]
        if (`STOP_COND_)	// @[MSHR.scala:411:15]
          $fatal;	// @[MSHR.scala:411:15]
      end
      if (_T_77 & ~reset & _T_279 & _T_461) begin	// @[MSHR.scala:372:35, :377:15, :409:15, :414:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:414:15]
          $error("Assertion failed: State transition from S_TIP_C to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:414:15]
        if (`STOP_COND_)	// @[MSHR.scala:414:15]
          $fatal;	// @[MSHR.scala:414:15]
      end
      if (_T_77 & ~reset & _T_279 & _T_420) begin	// @[MSHR.scala:372:35, :380:15, :409:15, :416:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:416:15]
          $error("Assertion failed: State transition from S_TIP_C to S_TRUNK_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:416:15]
        if (`STOP_COND_)	// @[MSHR.scala:416:15]
          $fatal;	// @[MSHR.scala:416:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :418:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:418:15]
          $error("Assertion failed: State transition from S_TIP_D to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:418:15]
        if (`STOP_COND_)	// @[MSHR.scala:418:15]
          $fatal;	// @[MSHR.scala:418:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :418:15, :419:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:419:15]
          $error("Assertion failed: State transition from S_TIP_D to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:419:15]
        if (`STOP_COND_)	// @[MSHR.scala:419:15]
          $fatal;	// @[MSHR.scala:419:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :418:15, :420:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:420:15]
          $error("Assertion failed: State transition from S_TIP_D to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:420:15]
        if (`STOP_COND_)	// @[MSHR.scala:420:15]
          $fatal;	// @[MSHR.scala:420:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_444) begin	// @[MSHR.scala:372:35, :375:15, :418:15, :421:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:421:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:421:15]
        if (`STOP_COND_)	// @[MSHR.scala:421:15]
          $fatal;	// @[MSHR.scala:421:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :418:15, :422:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:422:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:422:15]
        if (`STOP_COND_)	// @[MSHR.scala:422:15]
          $fatal;	// @[MSHR.scala:422:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_461) begin	// @[MSHR.scala:372:35, :377:15, :418:15, :423:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:423:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TIP_CD should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:423:15]
        if (`STOP_COND_)	// @[MSHR.scala:423:15]
          $fatal;	// @[MSHR.scala:423:15]
      end
      if (_T_77 & ~reset & _T_335 & _T_464) begin	// @[MSHR.scala:372:35, :379:15, :418:15, :424:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:424:15]
          $error("Assertion failed: State transition from S_TIP_D to S_TRUNK_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:424:15]
        if (`STOP_COND_)	// @[MSHR.scala:424:15]
          $fatal;	// @[MSHR.scala:424:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :427:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:427:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:427:15]
        if (`STOP_COND_)	// @[MSHR.scala:427:15]
          $fatal;	// @[MSHR.scala:427:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :427:15, :428:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:428:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:428:15]
        if (`STOP_COND_)	// @[MSHR.scala:428:15]
          $fatal;	// @[MSHR.scala:428:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :427:15, :429:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:429:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:429:15]
        if (`STOP_COND_)	// @[MSHR.scala:429:15]
          $fatal;	// @[MSHR.scala:429:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_444) begin	// @[MSHR.scala:372:35, :375:15, :427:15, :430:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:430:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TIP should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:430:15]
        if (`STOP_COND_)	// @[MSHR.scala:430:15]
          $fatal;	// @[MSHR.scala:430:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :427:15, :431:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:431:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:431:15]
        if (`STOP_COND_)	// @[MSHR.scala:431:15]
          $fatal;	// @[MSHR.scala:431:15]
      end
      if (_T_77 & ~reset & _T_383 & _T_464) begin	// @[MSHR.scala:372:35, :379:15, :427:15, :433:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:433:15]
          $error("Assertion failed: State transition from S_TIP_CD to S_TRUNK_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:433:15]
        if (`STOP_COND_)	// @[MSHR.scala:433:15]
          $fatal;	// @[MSHR.scala:433:15]
      end
      if (_T_77 & ~reset & _T_419 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :436:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:436:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:436:15]
        if (`STOP_COND_)	// @[MSHR.scala:436:15]
          $fatal;	// @[MSHR.scala:436:15]
      end
      if (_T_77 & ~reset & _T_419 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :436:15, :437:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:437:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:437:15]
        if (`STOP_COND_)	// @[MSHR.scala:437:15]
          $fatal;	// @[MSHR.scala:437:15]
      end
      if (_T_77 & ~reset & _T_419 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :436:15, :438:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:438:15]
          $error("Assertion failed: State transition from S_TRUNK_C to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:438:15]
        if (`STOP_COND_)	// @[MSHR.scala:438:15]
          $fatal;	// @[MSHR.scala:438:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_423) begin	// @[MSHR.scala:372:35, :382:15, :445:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:445:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_INVALID should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:445:15]
        if (`STOP_COND_)	// @[MSHR.scala:445:15]
          $fatal;	// @[MSHR.scala:445:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_430) begin	// @[MSHR.scala:372:35, :373:15, :445:15, :446:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:446:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_BRANCH should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:446:15]
        if (`STOP_COND_)	// @[MSHR.scala:446:15]
          $fatal;	// @[MSHR.scala:446:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_437) begin	// @[MSHR.scala:372:35, :374:15, :445:15, :447:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:447:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_BRANCH_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:447:15]
        if (`STOP_COND_)	// @[MSHR.scala:447:15]
          $fatal;	// @[MSHR.scala:447:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_444) begin	// @[MSHR.scala:372:35, :375:15, :445:15, :448:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:448:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TIP should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:448:15]
        if (`STOP_COND_)	// @[MSHR.scala:448:15]
          $fatal;	// @[MSHR.scala:448:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_451) begin	// @[MSHR.scala:372:35, :376:15, :445:15, :449:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:449:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TIP_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:449:15]
        if (`STOP_COND_)	// @[MSHR.scala:449:15]
          $fatal;	// @[MSHR.scala:449:15]
      end
      if (_T_77 & ~reset & _T_463 & _T_464) begin	// @[MSHR.scala:372:35, :379:15, :445:15, :452:15]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:452:15]
          $error("Assertion failed: State transition from S_TRUNK_CD to S_TRUNK_C should be impossible (false,true,true,true,true)\n    at MSHR.scala:357 assert(!(before === from.code && after === to.code), cf\"State transition from ${from} to ${to} should be impossible ${cfg}\")\n");	// @[MSHR.scala:452:15]
        if (`STOP_COND_)	// @[MSHR.scala:452:15]
          $fatal;	// @[MSHR.scala:452:15]
      end
      if (io_allocate_valid & ~reset & ~(~request_valid | no_wait & io_schedule_ready & _io_schedule_valid_output)) begin	// @[MSHR.scala:95:30, :181:83, :191:105, :531:{12,13,28,40}]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:531:12]
          $error("Assertion failed\n    at MSHR.scala:531 assert (!request_valid || (no_wait && io.schedule.fire()))\n");	// @[MSHR.scala:531:12]
        if (`STOP_COND_)	// @[MSHR.scala:531:12]
          $fatal;	// @[MSHR.scala:531:12]
      end
      if (_T_510 & new_request_prio_2 & ~reset & ~new_meta_hit) begin	// @[MSHR.scala:503:21, :504:24, :537:28, :583:14]
        if (`ASSERT_VERBOSE_COND_)	// @[MSHR.scala:583:14]
          $error("Assertion failed\n    at MSHR.scala:583 assert (new_meta.hit)\n");	// @[MSHR.scala:583:14]
        if (`STOP_COND_)	// @[MSHR.scala:583:14]
          $fatal;	// @[MSHR.scala:583:14]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0]     _RANDOM_0;
    logic [31:0]     _RANDOM_1;
    logic [31:0]     _RANDOM_2;
    logic [31:0]     _RANDOM_3;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        request_valid = _RANDOM_0[0];	// @[MSHR.scala:95:30]
        request_prio_0 = _RANDOM_0[1];	// @[MSHR.scala:95:30, :96:20]
        request_prio_1 = _RANDOM_0[2];	// @[MSHR.scala:95:30, :96:20]
        request_prio_2 = _RANDOM_0[3];	// @[MSHR.scala:95:30, :96:20]
        request_control = _RANDOM_0[4];	// @[MSHR.scala:95:30, :96:20]
        request_opcode = _RANDOM_0[7:5];	// @[MSHR.scala:95:30, :96:20]
        request_param = _RANDOM_0[10:8];	// @[MSHR.scala:95:30, :96:20]
        request_size = _RANDOM_0[13:11];	// @[MSHR.scala:95:30, :96:20]
        request_source = _RANDOM_0[19:14];	// @[MSHR.scala:95:30, :96:20]
        request_tag = {_RANDOM_0[31:20], _RANDOM_1[0]};	// @[MSHR.scala:95:30, :96:20]
        request_offset = _RANDOM_1[6:1];	// @[MSHR.scala:96:20]
        request_put = _RANDOM_1[12:7];	// @[MSHR.scala:96:20]
        request_set = _RANDOM_1[22:13];	// @[MSHR.scala:96:20]
        meta_valid = _RANDOM_1[23];	// @[MSHR.scala:96:20, :97:27]
        meta_dirty = _RANDOM_1[24];	// @[MSHR.scala:96:20, :98:17]
        meta_state = _RANDOM_1[26:25];	// @[MSHR.scala:96:20, :98:17]
        meta_clients = _RANDOM_1[27];	// @[MSHR.scala:96:20, :98:17]
        meta_tag = {_RANDOM_1[31:28], _RANDOM_2[8:0]};	// @[MSHR.scala:96:20, :98:17]
        meta_hit = _RANDOM_2[9];	// @[MSHR.scala:98:17]
        meta_way = _RANDOM_2[12:10];	// @[MSHR.scala:98:17]
        s_rprobe = _RANDOM_2[13];	// @[MSHR.scala:98:17, :119:33]
        w_rprobeackfirst = _RANDOM_2[14];	// @[MSHR.scala:98:17, :120:33]
        w_rprobeacklast = _RANDOM_2[15];	// @[MSHR.scala:98:17, :121:33]
        s_release = _RANDOM_2[16];	// @[MSHR.scala:98:17, :122:33]
        w_releaseack = _RANDOM_2[17];	// @[MSHR.scala:98:17, :123:33]
        s_pprobe = _RANDOM_2[18];	// @[MSHR.scala:98:17, :124:33]
        s_acquire = _RANDOM_2[19];	// @[MSHR.scala:98:17, :125:33]
        s_flush = _RANDOM_2[20];	// @[MSHR.scala:98:17, :126:33]
        w_grantfirst = _RANDOM_2[21];	// @[MSHR.scala:98:17, :127:33]
        w_grantlast = _RANDOM_2[22];	// @[MSHR.scala:98:17, :128:33]
        w_grant = _RANDOM_2[23];	// @[MSHR.scala:98:17, :129:33]
        w_pprobeackfirst = _RANDOM_2[24];	// @[MSHR.scala:98:17, :130:33]
        w_pprobeacklast = _RANDOM_2[25];	// @[MSHR.scala:98:17, :131:33]
        w_pprobeack = _RANDOM_2[26];	// @[MSHR.scala:98:17, :132:33]
        s_grantack = _RANDOM_2[28];	// @[MSHR.scala:98:17, :134:33]
        s_execute = _RANDOM_2[29];	// @[MSHR.scala:98:17, :135:33]
        w_grantack = _RANDOM_2[30];	// @[MSHR.scala:98:17, :136:33]
        s_writeback = _RANDOM_2[31];	// @[MSHR.scala:98:17, :137:33]
        sink = _RANDOM_3[2:0];	// @[MSHR.scala:145:17]
        gotT = _RANDOM_3[3];	// @[MSHR.scala:145:17, :146:17]
        bad_grant = _RANDOM_3[4];	// @[MSHR.scala:145:17, :147:22]
        probes_done = _RANDOM_3[5];	// @[MSHR.scala:145:17, :148:24]
        probes_toN = _RANDOM_3[6];	// @[MSHR.scala:145:17, :149:23]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_status_valid = request_valid;	// @[MSHR.scala:95:30]
  assign io_status_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_status_bits_tag = request_tag;	// @[MSHR.scala:96:20]
  assign io_status_bits_way = meta_way;	// @[MSHR.scala:98:17]
  assign io_status_bits_blockC = ~meta_valid;	// @[MSHR.scala:97:27, :166:28]
  assign io_status_bits_nestC = _io_status_bits_nestC_output;	// @[MSHR.scala:171:39]
  assign io_schedule_valid = _io_schedule_valid_output;	// @[MSHR.scala:191:105]
  assign io_schedule_bits_a_valid = _io_schedule_bits_a_valid_output;	// @[MSHR.scala:182:55]
  assign io_schedule_bits_a_bits_tag = request_tag;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_a_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_a_bits_param = {1'h0, req_needT ? (meta_hit ? 2'h2 : 2'h1) : 2'h0};	// @[MSHR.scala:95:30, :98:17, :102:22, :106:22, :109:22, :280:{35,41,56}, Parameters.scala:267:70]
  assign io_schedule_bits_a_bits_block = request_size != 3'h6 | ~(request_opcode == 3'h0 | (&request_opcode));	// @[MSHR.scala:96:20, :281:{51,95}, :282:{38,55,71}, :297:69, Parameters.scala:268:{14,52}]
  assign io_schedule_bits_b_valid = _io_schedule_bits_b_valid_output;	// @[MSHR.scala:183:41]
  assign io_schedule_bits_b_bits_param = s_rprobe ? (request_prio_1 ? request_param : {1'h0, req_needT ? 2'h2 : 2'h1}) : 3'h2;	// @[MSHR.scala:95:30, :96:20, :106:22, :109:22, :119:33, :284:{41,61,97}, Parameters.scala:267:70, :279:43]
  assign io_schedule_bits_b_bits_tag = s_rprobe ? request_tag : meta_tag;	// @[MSHR.scala:96:20, :98:17, :119:33, :285:41]
  assign io_schedule_bits_b_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_b_bits_clients = meta_clients & ~excluded_client;	// @[MSHR.scala:98:17, :277:28, :287:{51,53}]
  assign io_schedule_bits_c_valid = _io_schedule_bits_c_valid_output;	// @[MSHR.scala:184:43]
  assign io_schedule_bits_c_bits_opcode = {2'h3, meta_dirty};	// @[MSHR.scala:98:17, :113:22, :288:41]
  assign io_schedule_bits_c_bits_param = meta_state == 2'h1 ? 3'h2 : 3'h1;	// @[MSHR.scala:98:17, :106:22, :289:{41,53}, Parameters.scala:279:{11,43}]
  assign io_schedule_bits_c_bits_tag = meta_tag;	// @[MSHR.scala:98:17]
  assign io_schedule_bits_c_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_c_bits_way = meta_way;	// @[MSHR.scala:98:17]
  assign io_schedule_bits_c_bits_dirty = meta_dirty;	// @[MSHR.scala:98:17]
  assign io_schedule_bits_d_valid = _io_schedule_bits_d_valid_output;	// @[MSHR.scala:185:57]
  assign io_schedule_bits_d_bits_prio_0 = request_prio_0;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_prio_2 = request_prio_2;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_opcode = request_opcode;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_param = req_acquire ? (request_param == 3'h1 ? 3'h1 : request_param == 3'h2 ? {1'h0, meta_hit & meta_clients & req_clientBit ? 2'h2 : 2'h1} : request_param == 3'h0 ? {2'h0, req_acquire & (meta_hit ? ~meta_clients & (&meta_state) : gotT)} : 3'h0) : request_param;	// @[MSHR.scala:95:30, :96:20, :98:17, :102:22, :106:22, :109:22, :146:17, :217:53, :218:25, :219:{34,40,67,81}, :274:30, :296:41, :297:69, :299:53, Mux.scala:81:{58,61}, Parameters.scala:46:9, :279:{11,43}]
  assign io_schedule_bits_d_bits_size = request_size;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_source = request_source;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_offset = request_offset;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_put = request_put;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_d_bits_way = meta_way;	// @[MSHR.scala:98:17]
  assign io_schedule_bits_d_bits_bad = bad_grant;	// @[MSHR.scala:147:22]
  assign io_schedule_bits_e_valid = _io_schedule_bits_e_valid_output;	// @[MSHR.scala:186:43]
  assign io_schedule_bits_e_bits_sink = sink;	// @[MSHR.scala:145:17]
  assign io_schedule_bits_x_valid = _io_schedule_bits_x_valid_output;	// @[MSHR.scala:187:40]
  assign io_schedule_bits_dir_valid = _io_schedule_bits_dir_valid_output;	// @[MSHR.scala:188:66]
  assign io_schedule_bits_dir_bits_set = request_set;	// @[MSHR.scala:96:20]
  assign io_schedule_bits_dir_bits_way = meta_way;	// @[MSHR.scala:98:17]
  assign io_schedule_bits_dir_bits_data_dirty = s_release & _io_schedule_bits_dir_bits_data_WIRE_dirty;	// @[MSHR.scala:122:33, :221:54, :249:20, :250:21, :308:41]
  assign io_schedule_bits_dir_bits_data_state = s_release ? _io_schedule_bits_dir_bits_data_WIRE_state : 2'h0;	// @[MSHR.scala:102:22, :122:33, :221:54, :249:20, :250:21, :308:41]
  assign io_schedule_bits_dir_bits_data_clients = s_release & _io_schedule_bits_dir_bits_data_WIRE_clients;	// @[MSHR.scala:122:33, :221:54, :249:20, :250:21, :308:41]
  assign io_schedule_bits_dir_bits_data_tag = s_release ? (_GEN_0 ? meta_tag : request_tag) : 13'h0;	// @[MSHR.scala:96:20, :98:17, :122:33, :221:54, :226:57, :245:30, :270:19, :308:41, compatibility.scala:76:26]
  assign io_schedule_bits_reload = no_wait;	// @[MSHR.scala:181:83]
endmodule

